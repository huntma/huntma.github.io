<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hunt Ma</title>
    <link>https://huntma.github.io/post/index.xml</link>
    <description>Recent content in Posts on Hunt Ma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Apr 2017 15:46:31 -0700</lastBuildDate>
    <atom:link href="https://huntma.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Beginner Tutorial on Personal Website</title>
      <link>https://huntma.github.io/post/webeasy/</link>
      <pubDate>Tue, 18 Apr 2017 15:46:31 -0700</pubDate>
      
      <guid>https://huntma.github.io/post/webeasy/</guid>
      <description>

&lt;h3 id=&#34;beginner-friendly&#34;&gt;&lt;em&gt;*beginner friendly&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;This tutorial will get you a barebones, but acceptable personal website. It is meant as a starting off point. I expect you to journey on and learn more.
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;why-a-website&#34;&gt;Why a Website&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Your website is your internet ID. Put as much or as little info as you want.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It is an official place to showcase your work.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It is a way to get an edge in job hunts, and also really show off your cool projects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;okay let&amp;rsquo;s get to it&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;set-up-a-new-site&#34;&gt;Set up a new site&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Create a new Github account.&lt;/p&gt;

&lt;p&gt;Choose free version. We don&amp;rsquo;t have any valuable things so we don&amp;rsquo;t need private repos (repository is a place where things are stored).&lt;/p&gt;

&lt;p&gt;Make a professional username. Please. No kittenSlayer44 or anything like that.&lt;/p&gt;

&lt;p&gt;Start a new repo/project. Top left plus sign.&lt;/p&gt;

&lt;p&gt;Name it &amp;ldquo;[your username].github.io&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When does my site go on the web?&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Github contains a program called Github Pages that automatically creates your websitefrom that project you just created. They made it so that it MUST have that name though. Pics below.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;What am I doing?&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Github is an online repository. Is useful if you have multiple people working on a project.
We now have an account on the Github servers, and our project is on it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://huntma.github.io/image/170418_repo2.PNG&#34; alt=&#34;Repo2&#34; /&gt;
TODO: change default size of images
Since this is a new account, it asks to set up your first files and a local repo.&lt;br /&gt;
Click Readme. Write anything. This is the first file in your project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More info&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A README is a text file has information about the software that the creator thought that users should know before using. Like a user manual.
index.html is a weird name. Why? Because when the browser is looking for html files to generate the page, the html standard says to look for this specific name.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;overview-of-the-web&#34;&gt;Overview of the Web&lt;/h3&gt;

&lt;p&gt;Any monkey can learn to make a website. It won&amp;rsquo;t understand how it all works though. We are not monkeys.&lt;/p&gt;

&lt;p&gt;All website live somewhere. It will be on a computer that is connected to the internet.&lt;/p&gt;

&lt;p&gt;That computer has a program that can serve the site to people who request it. Hence servers.&lt;/p&gt;

&lt;p&gt;Each of these computers has an address, like every house has an address. A domain name is the nickname for it. For example &amp;ldquo;google.com&amp;rdquo; instead of &amp;ldquo;8.8.8.8&amp;rdquo;. Continuing the analogy, that&amp;rsquo;s like calling your house &amp;ldquo;home&amp;rdquo; instead of 330 De Neve Dr. Los Angeles, CA 90024.&lt;/p&gt;

&lt;p&gt;For us today, our website is going to live on Github&amp;rsquo;s servers.
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;html-css&#34;&gt;HTML &amp;amp; CSS&lt;/h3&gt;

&lt;p&gt;Hyper Text - Meaning words can be hyperlinks
Markup Language - A language to mark things up or annotate.&lt;/p&gt;

&lt;p&gt;Cascaded Style Sheets - the style of the content&lt;/p&gt;

&lt;p&gt;&lt;em&gt;CSS&lt;/em&gt;&lt;br /&gt;
It is called cascaded because the order of them matters. Later ones will override previous ones which is useful for customizing. Say you use one of many premade CSS. Then you can change little things with just your own CSS. No need to go into their code.&lt;/p&gt;

&lt;p&gt;Imagine you have a rich electronic document with images, colors, cool fonts, and an amazing layout. Wow, a graphic designer probably made this. How would you represent it electronically though?&lt;/p&gt;

&lt;p&gt;We could use a PDF or a Word document. Sure. But the web uses HTML and CSS which are lighter (in file size).&lt;/p&gt;

&lt;p&gt;Start with plain text. We now have the same words as on our doc.&lt;/p&gt;

&lt;p&gt;Our doc has very diverse content though. It has a header, title, images, and different sections. Use HTML (which uses tags like &lt;p&gt;blah&lt;/p&gt;) to mark sections of plain text.&lt;/p&gt;

&lt;p&gt;We have now told the software (chrome, firefox, ie) what kind of words we have. Use CSS to tell it how to display these words. Color, font, placement, size, etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In Summary&lt;/em&gt;&lt;br /&gt;
HTML will hold your content. CSS will hold your style.
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;shortest-intro-to-html&#34;&gt;Shortest intro to HTML.&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML element tags&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We mentioned these &amp;ldquo;element&amp;rdquo; tags. They look like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;
HELLLOOOOO
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most common elements are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;div - generic division&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;h[#] - headers where h1 biggest and people use up to h6 usually&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;p - paragraph&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;a - link&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Attributes&lt;/strong&gt;&lt;br /&gt;
Any element can have attributes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;big&amp;quot;&amp;gt;
HELLLOOOO
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So then in my CSS, I could say any element with big needs to fill the whole screen.
Most common are class and id. Use class is multiple. ID is supposed to be for one thing.
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;short-intro-to-css&#34;&gt;Short intro to CSS&lt;/h3&gt;

&lt;p&gt;CSS is to add style. It does this by referencing the elements and their attributes.
It does this with selectors which look like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* this is a comment in CSS */
h1 {
	color: red;
}

.big {
	color: blue;
	font-family: monospace;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First one makes all h1 headings red. Second one makes all elements in the class big fill up their container.&lt;/p&gt;

&lt;p&gt;Just know there are different selectors and ways to mix them to target specific parts of your html.&lt;/p&gt;

&lt;h3 id=&#34;our-workflow&#34;&gt;Our Workflow.&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Github takes a couple minutes to update its websites.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We want to see immediate results, so we develop locally.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create folder mySite in convenient location.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make html &amp;ldquo;index.html&amp;rdquo; in it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Get path of &amp;ldquo;index.html&amp;rdquo; and put into address bar of browser to view site or you can drag the file to your browser.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change your site.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Refresh the page.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It will look like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://huntma.github.io/image/170423web0&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;basics&#34;&gt;Basics.&lt;/h3&gt;

&lt;p&gt;One piece at a time.&lt;/p&gt;

&lt;p&gt;Copy this template into &amp;ldquo;index.html&amp;rdquo;. Edit the html file with any text editor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
	&amp;lt;!-- This is a comment --&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
	&amp;lt;!-- content goes here --&amp;gt;
	Hello
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a blank html document. You see the html tags that enclose the head and body. Head holds meta info that doesn&amp;rsquo;t get displayed. Body holds the content.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More info&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;!DOCTYPE tells the software reading this that it is an html doc. The &amp;lsquo;!&amp;rsquo; is fairly common in scripts and web languages to say something is important.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;get-bootstrap&#34;&gt;Get Bootstrap&lt;/h3&gt;

&lt;p&gt;Bootstrap is premade CSS. The best feature is they make your website display properly on different device sizes.&lt;/p&gt;

&lt;p&gt;Add the following code inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;head&amp;gt;
	&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
	&amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
	&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;

	&amp;lt;title&amp;gt;[title of website]&amp;lt;/title&amp;gt;

	&amp;lt;link href=&amp;quot;css/bootstrap.min.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
	&amp;lt;link href=&amp;quot;css/mycustom.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the title.&lt;/p&gt;

&lt;p&gt;Notice we have linked the bootstrap css and custom css sheets.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More info&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our custom is below bootstrap so that it will override. HTML docs are parsed from top to bottom so the latest CSS rules will prevail.
&amp;ldquo;min&amp;rdquo; only means minified which means it has been compressed to make it smaller so the website can load faster.
The paths we have on right now are relative to the root of our site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go on bootstrap website and download bootstrap. You don&amp;rsquo;t need the source, it just has extras.&lt;/p&gt;

&lt;p&gt;Find &amp;ldquo;bootstrap.min.css&amp;rdquo; and put it in &amp;ldquo;[path to mySite]/css/&amp;ldquo;. That means make a folder called css in [mySite] and put the .css file into it.&lt;/p&gt;

&lt;p&gt;Also make a file called &amp;ldquo;mycustom.css&amp;rdquo; and put it in the same folder.&lt;/p&gt;

&lt;p&gt;We also need to add bootstrap javascript and jQuery. Add the following right before the &lt;code&gt;&amp;lt;/html&amp;gt;&lt;/code&gt; tag in your &amp;ldquo;index.html&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;js/bootstrap.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then go into the Bootstrap file you downloaded and copy &amp;ldquo;bootstrap.min.js&amp;rdquo; into &amp;ldquo;[mySite]/js/&amp;rdquo;&lt;/p&gt;

&lt;p&gt;It should look like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://huntma.github.io/image/170423web1&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More info&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Javascript add action to our website. JQuery is a javascript library that bootstrap uses. Javascript &amp;gt; Jquery &amp;gt; bootstrap.js.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;navbar&#34;&gt;Navbar&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s use an altered version of the Navbar example from Bootstrap that was inspired by Tania Rascia. I added my own things to make it professional.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;nav class=&amp;quot;navbar navbar-inverse navbar-static-top&amp;quot;&amp;gt; 
	&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
		&amp;lt;div class=&amp;quot;navbar-header&amp;quot;&amp;gt;
			&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;navbar-toggle collapsed&amp;quot; data-toggle=&amp;quot;collapse&amp;quot; data-target=&amp;quot;#nav-example-1&amp;quot; aria-expanded=&amp;quot;false&amp;quot;&amp;gt;
				&amp;lt;span class=&amp;quot;sr-only&amp;quot;&amp;gt;Toggle nav&amp;lt;/span&amp;gt;
				&amp;lt;span class=&amp;quot;gicon-bar&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
				&amp;lt;span class=&amp;quot;icon-bar&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
				&amp;lt;span class=&amp;quot;icon-bar&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
			&amp;lt;/button&amp;gt;
			&amp;lt;a class=&amp;quot;navbar-brand&amp;quot; href=&amp;quot;/&amp;quot;&amp;gt;[my name]&amp;lt;/a&amp;gt;
			&amp;lt;/div&amp;gt;
		&amp;lt;div class=&amp;quot;collapse navbar-collapse&amp;quot; id=&amp;quot;nav-example-1&amp;quot;&amp;gt;
			&amp;lt;ul class=&amp;quot;nav navbar-nav navbar-right&amp;quot;&amp;gt;
				&amp;lt;li&amp;gt;&amp;lt;a href=&#39;about&#39;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;li&amp;gt;

				&amp;lt;li class=&amp;quot;dropdown&amp;quot;&amp;gt;
					&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;dropdown-toggle&amp;quot; data-toggle=&amp;quot;dropdown&amp;quot; role=&amp;quot;button&amp;quot; aria-haspopup=&amp;quot;true&amp;quot; aria-expanded=&amp;quot;false&amp;quot;&amp;gt;Projects&amp;lt;span class=&amp;quot;caret&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;	
					&amp;lt;ul class=&amp;quot;dropdown-menu&amp;quot;&amp;gt;
						&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Robotics&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
						&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Coding&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
						&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Photography&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
					&amp;lt;/ul&amp;gt;
				&amp;lt;/li&amp;gt;
				&amp;lt;li&amp;gt;&amp;lt;a href=&#39;https://huntma.github.io/post&#39;&amp;gt;Posts&amp;lt;/a&amp;gt;&amp;lt;li&amp;gt;
				&amp;lt;li&amp;gt;&amp;lt;a href=&#39;https://huntma.github.io/file/[myResume].pdf&#39;&amp;gt;Resume&amp;lt;/a&amp;gt;&amp;lt;li&amp;gt;
			&amp;lt;/ul&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It looks like a lot. But not that bad. Let&amp;rsquo;s break it down.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More info&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &amp;lsquo;a&amp;rsquo; tags are links. &amp;lsquo;href&amp;rsquo; says where to link to. We have link to places in our website that we have not created yet. &amp;ldquo;#&amp;rdquo; or &amp;lsquo;#&amp;rsquo; (doesen&amp;rsquo;t matter) is a placeholder. It doesn&amp;rsquo;t link to anywhere.&lt;/p&gt;

&lt;p&gt;404&amp;rsquo;s happen when links point to things that don&amp;rsquo;t exist. Like we are linking to about, but we haven&amp;rsquo;t created one.&lt;/p&gt;

&lt;p&gt;Another note about linking. Notice our paths are written absolute here. This is because the navbar will be on every page, so you can&amp;rsquo;t do relative paths. The leading &amp;lsquo;/&amp;rsquo; means that it will start from the base directory. This won&amp;rsquo;t work on local because the root will be the C:/ drive probably. When it is uploaded onto Github, it will work though.&lt;/p&gt;

&lt;p&gt;All the weird classes are just key-value pairs. Like class=&amp;ldquo;collapse&amp;rdquo; means that it is part of the collapse class. This doesn&amp;rsquo;t mean anything by itself. Bootstrap has defined what that means for us in its css and js files.&lt;/p&gt;

&lt;p&gt;Notice for the nave we are writing absolute paths from the root &amp;lsquo;/&amp;rsquo;. This is important because the navbar will be on every page so we can&amp;rsquo;t put relative paths. They won&amp;rsquo;t be correct on every page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Actually Tania Rascia breaks it down quite well. &lt;a href=&#34;https://www.taniarascia.com/what-is-bootstrap-and-how-do-i-use-it/&#34;&gt;Tania&amp;rsquo;s Site&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;jumbotron&#34;&gt;Jumbotron&lt;/h3&gt;

&lt;p&gt;Jumbotron is like a big ad. Many people use one. Add this into the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;jumbotron background&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
		&amp;lt;h1&amp;gt;Welcome to hunt.&amp;lt;/h1&amp;gt;
		&amp;lt;p&amp;gt;This is a hugo theme that uses bootstrap and is well commented.&amp;lt;/p&amp;gt;
		&amp;lt;br&amp;gt;
		&amp;lt;p&amp;gt;&amp;lt;a class=&amp;quot;btn btn-primary btn-lg&amp;quot; href=&amp;quot;#&amp;quot; role=&amp;quot;button&amp;quot;&amp;gt;Button!&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;front-page-grid&#34;&gt;Front page grid&lt;/h3&gt;

&lt;p&gt;In bootstrap you use rows that contain columns to organize.&lt;/p&gt;

&lt;p&gt;It is separated into 12 cols.&lt;/p&gt;

&lt;p&gt;Put this into the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tags of &amp;ldquo;index.html&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;container front-page&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
		&amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;
			&amp;lt;span class=&amp;quot;glyphicon glyphicon-cloud glyphicon-large&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
			&amp;lt;h3&amp;gt;About&amp;lt;/h3&amp;gt;
			&amp;lt;p&amp;gt;In summary, it&#39;s about learning efficiently.&amp;lt;/p&amp;gt;
		&amp;lt;/div&amp;gt;
		&amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;
			&amp;lt;span class=&amp;quot;glyphicon glyphicon-pencil glyphicon-large&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
			&amp;lt;h3&amp;gt;Posts&amp;lt;/h3&amp;gt;
			&amp;lt;p&amp;gt;Posts about any topic.&amp;lt;/p&amp;gt;
		&amp;lt;/div&amp;gt;
		&amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;
			&amp;lt;span class=&amp;quot;glyphicon glyphicon-plus glyphicon-large&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
			&amp;lt;h3&amp;gt;Projects&amp;lt;/h3&amp;gt;
			&amp;lt;p&amp;gt;Check out my projects.&amp;lt;/p&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how we have three divs each of 4 units wide. That makes up 12 units which will fill up the screen the way bootstrap intended.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More info&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;col-md-4 is kind of confusing. &amp;lsquo;md&amp;rsquo; means that for medium sized screens, the browser will look for any class with &amp;lsquo;md&amp;rsquo; in it and display that.
There are
  * xs&lt;br /&gt;
  * sm
  * md
  * lg
  * xl&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tania gives a good explanation too.&lt;/p&gt;

&lt;h3 id=&#34;add-clickable-boxes&#34;&gt;Add clickable boxes.&lt;/h3&gt;

&lt;p&gt;We make each &lt;code&gt;&amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;&lt;/code&gt; a clickable link.&lt;/p&gt;

&lt;p&gt;This messes up the color though, so add this to &amp;ldquo;mycustom.css&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/*clickable-box class properties*/
a .clickable {
	color: white;
}

a .clickable:hover {
	color: red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So then overall it will look like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;container front-page&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
		&amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;
			&amp;lt;a href=&amp;quot;about&amp;quot;&amp;gt;
				&amp;lt;div class=&amp;quot;clickable&amp;quot;&amp;gt;
					&amp;lt;span class=&amp;quot;glyphicon glyphicon-cloud glyphicon-large&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
					&amp;lt;h3&amp;gt;About&amp;lt;/h3&amp;gt;
					&amp;lt;p&amp;gt;In summary, it&#39;s about learning efficiently.&amp;lt;/p&amp;gt;
				&amp;lt;/div&amp;gt;
			&amp;lt;/a&amp;gt;
		&amp;lt;/div&amp;gt;
		&amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;
		  &amp;lt;a href=&amp;quot;post&amp;quot;&amp;gt;
				&amp;lt;div class=&amp;quot;clickable&amp;quot;&amp;gt;
					&amp;lt;span class=&amp;quot;glyphicon glyphicon-pencil glyphicon-large&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
					&amp;lt;h3&amp;gt;Posts&amp;lt;/h3&amp;gt;
					&amp;lt;p&amp;gt;Posts about any topic.&amp;lt;/p&amp;gt;
				&amp;lt;/div&amp;gt;
			&amp;lt;/a&amp;gt;
		&amp;lt;/div&amp;gt;
		&amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;
			&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;
				&amp;lt;div class=&amp;quot;clickable&amp;quot;&amp;gt;
					&amp;lt;span class=&amp;quot;glyphicon glyphicon-plus glyphicon-large&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
					&amp;lt;h3&amp;gt;Projects&amp;lt;/h3&amp;gt;
					&amp;lt;p&amp;gt;Check out my projects.&amp;lt;/p&amp;gt;
				&amp;lt;/div&amp;gt;
			&amp;lt;/a&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;some-more-styling&#34;&gt;Some More Styling&lt;/h3&gt;

&lt;p&gt;Put all of this into &amp;ldquo;mycustom.css&amp;rdquo;. Remember we want to override bootstrap&amp;rsquo;s css.&lt;/p&gt;

&lt;p&gt;Get rid of the spacing at the bottom of the navbar.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.navbar {
	margin-bottom: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the color of the background and text&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {
	background: #3E4649;
	color: white;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change how the headers look.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;h1,
h2 {
	font-weight:bold;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the jumbotron color and how the text is inside&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.jumbotron {
	background: #27A967;
	text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the p&amp;rsquo;s of the jumbotron class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.jumbotron p {
	font-size: 25px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the button look. Tania calls it a ghost button.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.btn-primary {
	color: white;
	background-color: transparent;
	border-color: white;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change how the button looks when you hover over it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.btn-primary:hover {
	color: #27A967;
	background-color: white;
	border-color: white;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the navbar color, the color of the navbar link, and how the nav items look when they are hovered.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;
/* navbar */
.navbar-inverse {
	background: #2E2F31;
}

/* navbar links */
.navbar-inverse .navbar-nav li a {
	color: white;
	font-size: 16px;
}

.navbar-inverse .navbar-nav li a:hover {
	background: #27A967;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the dropdown menu background, each item in the dropdown menu, and how they look when you hover over them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.dropdown-menu {
	background: #2E2F31;
}

.dropdown-menu li a {
	border: 10px;
}

/* li&#39;s of the dropdown of navbar */
.navbar-inverse .navbar-nav .dropdown-menu li a:hover {
	background: #2C463C;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change how the front-page class items are aligned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.front-page {
	text-align:center;
}

.front-page p {
	margin-bottom: 40px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;change-glyph-size&#34;&gt;Change Glyph Size&lt;/h3&gt;

&lt;p&gt;This into CSS.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.glyphicon-large {
	font-size: 40px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice we already had glyhpicon-large class. Aria-hidden is just a property that affects the look.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;span class=&amp;quot;glyphicon glyphicon-cloud glyphicon-large&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-resume&#34;&gt;Add Resume&lt;/h3&gt;

&lt;p&gt;Put your resume in &amp;ldquo;[mySite]/file/&amp;rdquo;&lt;/p&gt;

&lt;p&gt;This line in the nav is what links it and it is already in the &amp;ldquo;index.html&amp;rdquo;. Make it link to the name of your resume.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;li&amp;gt;&amp;lt;a href=&#39;file/[myResume].pdf&#39;&amp;gt;Resume&amp;lt;/a&amp;gt;&amp;lt;li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;add-an-about-page&#34;&gt;Add an About page&lt;/h3&gt;

&lt;p&gt;Make an &amp;ldquo;[mySite]/about/index.html&amp;rdquo;. Add this to it. You may recognize our navbar and
our header and the javascript we added. That&amp;rsquo;s because every page on your website will have these. So use this following as a template for more pages.&lt;/p&gt;

&lt;p&gt;If you want to add cool posts about projects. Put those in &amp;ldquo;[mySite]/post/&amp;ldquo;. Notice that the Post link links to this place. You will also need an &amp;ldquo;index.html&amp;rdquo; in the post folder because when you navigate to it. It will look for an index file. Ideally, that will contain links to all of your posts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
		&amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
		&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
	
		&amp;lt;title&amp;gt;About Me&amp;lt;/title&amp;gt; 

		&amp;lt;link href=&amp;quot;css/bootstrap.min.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
		&amp;lt;link href=&amp;quot;css/mycustom.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
	&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

&amp;lt;nav class=&amp;quot;navbar navbar-inverse navbar-static-top&amp;quot;&amp;gt; 
	&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
		&amp;lt;div class=&amp;quot;navbar-header&amp;quot;&amp;gt;
			&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;navbar-toggle collapsed&amp;quot; data-toggle=&amp;quot;collapse&amp;quot; data-target=&amp;quot;#nav-example-1&amp;quot; aria-expanded=&amp;quot;false&amp;quot;&amp;gt;
				&amp;lt;span class=&amp;quot;sr-only&amp;quot;&amp;gt;Toggle nav&amp;lt;/span&amp;gt;
				&amp;lt;span class=&amp;quot;icon-bar&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
				&amp;lt;span class=&amp;quot;icon-bar&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
				&amp;lt;span class=&amp;quot;icon-bar&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
			&amp;lt;/button&amp;gt;
			&amp;lt;a class=&amp;quot;navbar-brand&amp;quot; href=&amp;quot;/&amp;quot;&amp;gt;Hunt Ma&amp;lt;/a&amp;gt;
		&amp;lt;/div&amp;gt;
		&amp;lt;div class=&amp;quot;collapse navbar-collapse&amp;quot; id=&amp;quot;nav-example-1&amp;quot;&amp;gt;
			&amp;lt;ul class=&amp;quot;nav navbar-nav navbar-right&amp;quot;&amp;gt;
				&amp;lt;li&amp;gt;&amp;lt;a href=&#39;https://huntma.github.io/about&#39;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;li&amp;gt;
				
				&amp;lt;li class=&amp;quot;dropdown&amp;quot;&amp;gt;
					&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;dropdown-toggle&amp;quot; data-toggle=&amp;quot;dropdown&amp;quot; role=&amp;quot;button&amp;quot; aria-haspopup=&amp;quot;true&amp;quot; aria-expanded=&amp;quot;false&amp;quot;&amp;gt;Projects&amp;lt;span class=&amp;quot;caret&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;	
					&amp;lt;ul class=&amp;quot;dropdown-menu&amp;quot;&amp;gt;
						&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Robotics&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
						&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Coding&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
						&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Photography&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
					&amp;lt;/ul&amp;gt;
				&amp;lt;/li&amp;gt;
				&amp;lt;li&amp;gt;&amp;lt;a href=&#39;https://huntma.github.io/post&#39;&amp;gt;Posts&amp;lt;/a&amp;gt;&amp;lt;li&amp;gt;
				&amp;lt;li&amp;gt;&amp;lt;a href=&#39;https://huntma.github.io/file/[myResume].pdf&#39;&amp;gt;Resume&amp;lt;/a&amp;gt;&amp;lt;li&amp;gt;
			&amp;lt;/ul&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/nav&amp;gt;

&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
		&amp;lt;div class=&amp;quot;col-md-12&amp;quot;&amp;gt;
			&amp;lt;h1&amp;gt;About Me&amp;lt;/h1&amp;gt;
			&amp;lt;p&amp;gt;About meeeeeeeeeeeeeeeeeeeeeeeeeee&amp;lt;/p&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;

	&amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&amp;quot;js/bootstrap.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;edits-you-can-do&#34;&gt;Edits You Can Do&lt;/h3&gt;

&lt;p&gt;Look at &amp;ldquo;Adding Custom Styles to Bootstrap&amp;rdquo; on Tania&amp;rsquo;s Site.&lt;/p&gt;

&lt;p&gt;To add an image on the front page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/*background image*/

.background {
	background: url(&#39;/image/[myPic].JPG&#39;) no-repeat center center fixed; 
	-webkit-background-size: cover;
	-moz-background-size: cover;
	-o-background-size: cover;
	background-size: cover;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;continue-to-evolve&#34;&gt;Continue to Evolve!&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You can extend your website into a blog.
Look into using a Static Site Generator. This site is made using Hugo. There are some pretty good tutorials out there, but to be honest I needed to use multiple ones to really learn how to do it. There&amp;rsquo;s no single, super-complete one out there.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Buy your own domain name and attach it to your website.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;More info&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All websites need to live somewhere. Ours lives on the Github servers which are actual computers sitting somewheres wired up to the internet. This website just needs an easy name to remember instead of a complicated IP address like 198.162.0.0. This assigning of names to IP addresses is handled by big organizations called Domain Name Registrars.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Learn about Github&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Google git tutorial and do it. Git is a fast, lightweight program designed to keep a history of your projects on computers. This is a type of &lt;em&gt;version control&lt;/em&gt; system. Github is just a website built using this tool to give you a clickable interface and providing online servers to store your projects.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTML and CSS&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Trials and Tribulations Using Facedetect on Texas Instrument LCDK OMAP-L138</title>
      <link>https://huntma.github.io/post/LCDK/</link>
      <pubDate>Wed, 05 Apr 2017 22:16:26 -0700</pubDate>
      
      <guid>https://huntma.github.io/post/LCDK/</guid>
      <description>

&lt;h2 id=&#34;a-digital-signal-processing-project&#34;&gt;A Digital Signal Processing Project&lt;/h2&gt;

&lt;h3 id=&#34;how-to-use-this-post&#34;&gt;How to Use This Post&lt;/h3&gt;

&lt;p&gt;There is a lot of content. I recommend skimming the document to get an idea of what might be useful as pertains to your project.&lt;/p&gt;

&lt;h3 id=&#34;note&#34;&gt;Note&lt;/h3&gt;

&lt;p&gt;This document references OpenCV 1.x. Here is the &lt;a href=&#34;https://huntma.github.io/file/cv1x.pdf&#34;&gt;reference manual&lt;/a&gt;. As of writing, it is an old version, but we used it because TI StarterWare&amp;rsquo;s Facedetect demo uses this. It will require more advanced knowledge to try and use a newer verson of OpenCV as this involves compiling from source to the ARM processor in your LCDK. More at the end of the guid&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t be afraid of the complexity of the demo&lt;/strong&gt;&lt;br /&gt;
The code is complicated, but you don&amp;rsquo;t have to know every part in order to do the project well. It is too easy to get sucked into the void of trying to understand everything. Use the reference manual that comes with the class. You are only going to be interested in certain interrupts and tasks because that is where the magic happens. The document explains it decent, but here is my take to give you a little more. Anything with Setup in the name you can ignore.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;main() is just setup for the program, you won&amp;rsquo;t need to mess with it.&lt;/li&gt;
&lt;li&gt;facedetectTask is where the detection actually happens.&lt;/li&gt;
&lt;li&gt;LCDIsr is the interrupt service routine to draw to the output. Edit this to have different outputs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Yes it takes a long time to build and run&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;The only thing you can do is be efficient with your time&lt;/em&gt;&lt;br /&gt;
One thing I noticed with the LCDK CCS setup is that every time you make a change to the code and want to test it out, you will have to wait at least a couple of minutes. This is extremely frustrating when you are trying to work fast, but it is a limitation that we can&amp;rsquo;t avoid without a lot of research. What I did to max&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Detect Circles&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;One line of code will allow you to detect circles instead.&lt;/em&gt;&lt;br /&gt;
So you&amp;rsquo;ve got it working. Now let us change it to detect circles and give you a taste that changing the code is not as hard as it seems. Go to facedetectTask and comment out the Haar detection line. We will replace it with an included function in OpenCV.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* Apply OpenCV haardetect algorithm */
//dsp_sequence = cvHaarDetectObjects(image, cascade, storage, 2.5, 2, 0,cvSize(30, 30));

/* Apply OpenCV Hough Circles algorithm */  
dsp_sequence = cvHoughCircles(image, storage, CV_HOUGH_GRADIENT, 2, image-&amp;gt;width/6, 100, 50, 0, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cvHoughCircles uses a transform on the image to detect circles. There are multiple parameters to the function which you can change. Try the ones I have here to start and reference the manual to play with it yourself. Note that the program will crash if it detects too many circles at once. We also have to draw the circles to the output. Remember that this involves editing LCDIsr. My code is below. Thanks to Aditya Kotte who pioneered this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c = (float *) cvGetSeqElem(dsp_sequence2, i);
CvPoint pt = cvPoint(cvRound(c[0]), cvRound(c[1]));
int radius = cvRound(c[2]);
cvCircle(image1, pt, radius, blue, 2, 8, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Using custom HaarClassifier Cascades&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Loading your own HaarClassifier is very difficult&lt;/em&gt;&lt;br /&gt;
You will not be able to cvLoad a new HaarClassifierCascade.xml easily. I ran into very cryptic errors when trying to do this that would require a very deep understanding of the LCDK OMAPL138 to fix.&lt;/p&gt;

&lt;p&gt;The facedetect uses HaarClassifier Cascades to do their facedetect. This is stored in a variable called buffer as an array of ints. Somehow they converted the .xml file into data that would go into memory and hardcoded it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trying to Use Newer OpenCV&lt;/strong&gt;
&lt;em&gt;Research ARM-EABI cross compile OpenCV&lt;/em&gt;
This will point you in the right direction. If you are not a computer science major, you may not understand what this means. That&amp;rsquo;s okay, I didn&amp;rsquo;t either, we are here to learn. Here&amp;rsquo;s the lowdown to get you started on how to learn it. Two major instruction sets are x86 and ARM. When we write programs in any code, they are compiled so that they become machine instructions that the CPU can read them. We have the source for OpenCV on the internet, easily accessible. The LCDK uses an ARM chip. It is embedded, so there is no operating system on the LCDK (well technically there is a BIOS, which I&amp;rsquo;m actually not sure how that will affect). But we want EABI (Embedded Application Binary Interface - ABI&amp;rsquo;s are a whole other topic). If there was an operating system, there would be a need to compile for the different operating systems as well (Linux, Windows, MacOS being the major ones). Each operating system has different requirements for executables, and you also knew the hardware does too. Confusing I know. If you actually complete this please contact me! I would love to know. Then cross compiling is just the term we use when we want to compile a program for different platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where to Put Your Project File&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Having the working project file in your flashdrive will ensure nothing gets changed.&lt;/em&gt;&lt;br /&gt;
Save your CCS project on your flashdrive. This will prevent the host computer changes in between your sessions to affect your project. Your project will still reference library files located on the computer.&lt;/p&gt;

&lt;p&gt;You might get some error with missing GEL files or missing dependencies. This is okay. The GUI for CCS is nice enough that you can click through it and it will let you find your file. When you installed the Starterware, it should have downloaded other dependencies in the Program Files -&amp;gt; Texas Instruments (or ti) folder. One of them is &lt;strong&gt;pdk_C6748_2_0_0_0&lt;/strong&gt;. The error in CCS should tell you. Actually what I did is I just copied the dependencies needed into the same project folder on my flash so that it would contain the full set of files needed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manipulating CvSequence&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Understand that sequences are linked lists&lt;/em&gt;&lt;br /&gt;
This is a confusing structure because some of OpenCV&amp;rsquo;s structs are made from sequences, but you can also use a sequence to hold things. How it relates to you is that if you are using findContours, then a sequence of contours is returned. Then also note that contours are sequence of points. Here is a quick example of how to access the points in the sequence&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(current=dsp_sequence; current != NULL; current=current-&amp;gt;h_next) {
	for(j=0; j &amp;lt; current-&amp;gt;total; j++) {
		CvPoint* pt = (CvPoint*)cvGetSeqElem(dsp_sequence,j);
		printf(&amp;quot;   hello the (x,y) is : (%d, %d)\n&amp;quot;,pt-&amp;gt;x,pt-&amp;gt;y);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The outer loop traverses the sequence of contours(which are also cvSequences). The inner loop will traverse the points of that contour. Notice that I use a typcast to CvPpoint when I use cvGetSeqElem and store it in a temporary CvPoint. This typcast is needed. You can refer to the manual for more info. Which leads into the next tip.&lt;/p&gt;

&lt;p&gt;Note that OpenCV defines many objects themselves. Look at the manual to see. There are cvPoints, cvFonts, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Refer to source code&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;The manual is not 100% accurate, so you will need your C knowledge to infer&lt;/em&gt;&lt;br /&gt;
When the manual is wrong. Right-click and use open function declaration in order to inspect the source code. This is a neat tool provided by CCS that will automatically open the file and display the function. This is most useful when figuring out what arguments to pass into the function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Doing Image Processing&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;An easier project is to do image processing, but you will need to make changes&lt;/em&gt;&lt;br /&gt;
You will need to include highgui.lib if you want to load and save images. For some reason this library was not built into the facedetect demo. Thhe reasoning is probably because facedetect doesn&amp;rsquo;t use any of the functions from it. Andrew Ho has built a highgui.lib from source that you can just include in your project. Do it by placing the file in your /bin folder of the project folder and then going to project properties going to C6000 linker. Then actually include it in your main c file with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;highgui.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may also need the highgui.h header file from the source code. But you can get that from SourceForge. Here is the file for the &lt;a href=&#34;https://huntma.github.io/file/highgui.lib&#34;&gt;highgui.lib&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://huntma.github.io/image/highgui.PNG&#34; alt=&#34;highgui.lib bin folder placement&#34; /&gt;&lt;br /&gt;
&lt;em&gt;Image: Shows where exactly to put the lib file in your project folder.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loading and Saving Images&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Use cvLoadImage and cvSaveImage.&lt;/em&gt;&lt;br /&gt;
cvLoadImage will allow you to load bmp images. If you are doing it in Paint, save them as 256-bit images. Note that this does take a long time for any appreciably sized images. Just note to use the correct path. Debugging which path to use took me a couple of hours.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const char* source = &amp;quot;C:/Users/EE113D/Desktop/template.bmp&amp;quot;;
IplImage * image = cvLoadImage(source, CV_LOAD_IMAGE_COLOR);
//the second parameter to the function in all CAPS is just to let the program know the file is a 256-bit color image. You will need that
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cvSaveImage will allow you to save any IplImage or cvMat as a bmp image back onto your desktop. This is useful for actually seeing what the function are doing to the image. In fact, I would say that this is a vital step. Research a bit how the function is implemented and then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cvSaveImage(&amp;quot;C:/Users/EE113D/Desktop/edged.bmp&amp;quot;, gray);
//gray is just the name of the IplImage I wanted to save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;You can&amp;rsquo;t use printf in Facedetect Video Processing&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;printf is too slow and messes up the interrupts in video processing&lt;/em&gt;&lt;br /&gt;
Another advantage of the doing images is that you can actually do printf to the console that is convenently located in CCS. If you try to do it with the video processing, your program will break. Feel free to try it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IplImage and CvMat&lt;/strong&gt;&lt;br /&gt;
They can both be used as images. IplImage if you google is just a wrapper to hold an image. cvMat will be more basic. You may use either, but stick to one. Refer to the manual for information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful Image Filters&lt;/strong&gt;&lt;br /&gt;
You will want to use grayscale, edge, and smooth filters if you are doing any sort of image processing. Below are details on how to use them.&lt;/p&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speeding up cvLoad&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Overall&lt;/em&gt;&lt;br /&gt;
* cvLoad takes too long to load images.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use Python Script to turn bmp images into C byte array fast.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add this to the project.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Details&lt;/em&gt;&lt;br /&gt;
You will notice that cvLoad takes a boatload of time to load images. For our project I had about 100x100 pixels and it would still take a couple of minutes. When you want to do real processing this is not going to be practical on real images. Kevin Balke wrote an awesome script that basically parses file into a C language static byte array. Supposedly the cvLoad does the same thing when it is loading bmp files. So instead of waiting for the program to locate the file on your local computer and slowly reading it in, we can use the python script to do this conversion for us first. Note that I personally did not have enough time to implement this into my project, so you may have to work out the smaller bugs yourself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Detailed Steps&lt;/em&gt; provided by Kevin Balke&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download python 2.7 from python.org and install&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add &lt;a href=&#34;https://huntma.github.io/file/filetoc.py&#34;&gt;filetoc.py&lt;/a&gt; to project&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add image file to project&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Under Project Properties -&amp;gt; Build -&amp;gt; Steps -&amp;gt; Pre-build steps:
Enter into Command:&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;@C:\Python27\python ${PWD}..\filetoc.py -f ${PWD}..\image.bmp -o ${PWD}..\image -n image&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Replace bmp.h with modified copy to add imread_const&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Notes on step 6&lt;/em&gt;&lt;br /&gt;
If you are using IplImage, it is a wrapper around the actual data of the image. What you should do is declare your own image and then manually populate the values that it requires. This is where your C skills come in. You will find that somewhere in the IplImage struct, there is a place for the data of the image. Save the results of filetoc.py as a variable and populate you IplImage with that.&lt;/p&gt;

&lt;p&gt;As I recall Kevin did recommend PILLOW, an active fork of PIL (Python Imaging Library) that you may need. Again, as I didn&amp;rsquo;t actually implement this step, I am just trying to prepare you for possible tools you will need.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>post0</title>
      <link>https://huntma.github.io/post/post0/</link>
      <pubDate>Mon, 03 Apr 2017 01:26:13 -0700</pubDate>
      
      <guid>https://huntma.github.io/post/post0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>post9</title>
      <link>https://huntma.github.io/post/post9/</link>
      <pubDate>Mon, 03 Apr 2017 01:26:10 -0700</pubDate>
      
      <guid>https://huntma.github.io/post/post9/</guid>
      <description></description>
    </item>
    
    <item>
      <title>post8</title>
      <link>https://huntma.github.io/post/post8/</link>
      <pubDate>Mon, 03 Apr 2017 01:26:08 -0700</pubDate>
      
      <guid>https://huntma.github.io/post/post8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>post7</title>
      <link>https://huntma.github.io/post/post7/</link>
      <pubDate>Mon, 03 Apr 2017 01:26:04 -0700</pubDate>
      
      <guid>https://huntma.github.io/post/post7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>post6</title>
      <link>https://huntma.github.io/post/post6/</link>
      <pubDate>Mon, 03 Apr 2017 01:26:01 -0700</pubDate>
      
      <guid>https://huntma.github.io/post/post6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>post5</title>
      <link>https://huntma.github.io/post/post5/</link>
      <pubDate>Mon, 03 Apr 2017 01:25:59 -0700</pubDate>
      
      <guid>https://huntma.github.io/post/post5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>post4</title>
      <link>https://huntma.github.io/post/post4/</link>
      <pubDate>Mon, 03 Apr 2017 01:25:57 -0700</pubDate>
      
      <guid>https://huntma.github.io/post/post4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>post3</title>
      <link>https://huntma.github.io/post/post3/</link>
      <pubDate>Mon, 03 Apr 2017 01:25:55 -0700</pubDate>
      
      <guid>https://huntma.github.io/post/post3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>post2</title>
      <link>https://huntma.github.io/post/post2/</link>
      <pubDate>Mon, 03 Apr 2017 01:25:53 -0700</pubDate>
      
      <guid>https://huntma.github.io/post/post2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>post1</title>
      <link>https://huntma.github.io/post/post1/</link>
      <pubDate>Mon, 03 Apr 2017 01:25:51 -0700</pubDate>
      
      <guid>https://huntma.github.io/post/post1/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>